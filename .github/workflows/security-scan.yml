name: Terraform Security Scan

on:
  push:
    branches: [ main, master ]
    paths:
      - '**/*.tf'
      - '.github/workflows/security-scan.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - '**/*.tf'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install boto3 pandas scikit-learn requests pyyaml
        
    - name: Install security tools
      run: |
        # tfsec 설치
        curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
        
        # Checkov 설치
        pip install checkov
        
        # Terrascan 설치
        curl -L "$(curl -s https://api.github.com/repos/accurics/terrascan/releases/latest | grep -o -E "https://.+?_Linux_x86_64.tar.gz")" > terrascan.tar.gz
        tar -xf terrascan.tar.gz terrascan && rm terrascan.tar.gz
        sudo install terrascan /usr/local/bin && rm terrascan
        
    - name: Run security scan
      id: security_scan
      run: |
        python -c "
        from src.terraform_analyzer.terraform_scanner import TerraformScanner
        import os
        import json
        
        scanner = TerraformScanner('./terraform')
        results = scanner.run_all_scans()
        
        # GitHub Actions에 결과 출력
        has_critical = results.get('has_critical', False)
        should_block = results.get('should_block_deployment', False)
        
        if has_critical:
            critical_count = len(results.get('critical_findings', []))
            print(f'::warning::심각한 보안 취약점 {critical_count}개 발견!')
            
            # 배포 차단 여부 설정
            if should_block:
                print('::set-output name=block_deployment::true')
                print('::error::심각한 보안 취약점으로 인해 배포가 차단되었습니다!')
            else:
                print('::set-output name=block_deployment::false')
        else:
            print('::set-output name=block_deployment::false')
        "
        
    - name: Check deployment status
      if: steps.security_scan.outputs.block_deployment == 'true'
      run: exit 1