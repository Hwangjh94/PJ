name: Terraform Security Scan

on:
  push:
    branches: [ main, master ]
  
  pull_request:
    branches: [ main, master ]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install boto3 pandas scikit-learn requests pyyaml
        
    - name: Install security tools
      run: |
        # tfsec 설치
        curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
        
        # Checkov 설치
        pip install checkov
        
        # Terrascan 설치
        curl -L "$(curl -s https://api.github.com/repos/accurics/terrascan/releases/latest | grep -o -E "https://.+?_Linux_x86_64.tar.gz")" > terrascan.tar.gz
        tar -xf terrascan.tar.gz terrascan && rm terrascan.tar.gz
        sudo install terrascan /usr/local/bin && rm terrascan
        
    - name: Run security scan
      id: security_scan
      run: |
        # scan_results 디렉토리 생성
        mkdir -p scan_results
        
        # 모의 스캔 실행 (실제 환경에서는 --mock 옵션 제거)
        python run_security_scan.py --dir ./examples/vulnerable --mock
        
        # GitHub Actions에 결과 출력
        if grep -q "심각한 취약점" scan_results/combined_results_*.json; then
          echo "::warning::심각한 보안 취약점이 발견되었습니다!"
          echo "::set-output name=has_critical::true"
        else
          echo "::set-output name=has_critical::false"
        fi
        
    - name: Check deployment status
      if: steps.security_scan.outputs.has_critical == 'true'
      run: exit 1