name: Terraform Security Scan with Auto-Masking

on:
  push:
    branches: [ main, master ]
    paths:
      - '**/*.tf'
      - '.github/workflows/security-scan-with-masking.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - '**/*.tf'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install boto3 pandas scikit-learn requests pyyaml
        
    - name: Install security tools
      run: |
        # tfsec 설치
        curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
        
        # Checkov 설치
        pip install checkov
        
        # Terrascan 설치
        curl -L "$(curl -s https://api.github.com/repos/accurics/terrascan/releases/latest | grep -o -E "https://.+?_Linux_x86_64.tar.gz")" > terrascan.tar.gz
        tar -xf terrascan.tar.gz terrascan && rm terrascan.tar.gz
        sudo install terrascan /usr/local/bin && rm terrascan
        
    - name: Run security scan
      id: security_scan
      run: |
        python -c "
        from src.terraform_analyzer.terraform_scanner import TerraformScanner
        import os
        import json
        
        scanner = TerraformScanner('./terraform')
        results = scanner.run_all_scans(use_mock=True)  # 실제 환경에서는 False로 설정
        
        # 결과 파일에 저장
        with open('scan_results.json', 'w') as f:
            json.dump(results, f, indent=2)
        
        # GitHub Actions에 결과 출력
        has_critical = results.get('has_critical', False)
        if has_critical:
            critical_count = len(results.get('critical_findings', []))
            print(f'::warning::심각한 보안 취약점 {critical_count}개 발견!')
            print('::set-output name=has_critical::true')
            print(f'::set-output name=critical_count::{critical_count}')
        else:
            print('::set-output name=has_critical::false')
            print('::set-output name=critical_count::0')
        "
        
    - name: Apply auto-masking
      if: steps.security_scan.outputs.has_critical == 'true'
      run: |
        echo "심각한 취약점 발견! 자동 마스킹 적용 중..."
        python -c "
        from src.lambda_functions.auto_masking_lambda import apply_masking
        import json
        import os
        
        # 스캔 결과 로드
        with open('scan_results.json', 'r') as f:
            results = json.load(f)
        
        # 취약점별 마스킹 적용
        masked_count = 0
        for finding in results.get('critical_findings', []):
            # Terraform 파일 읽기
            file_path = finding.get('file', '')
            if not file_path or not os.path.exists(file_path):
                print(f'파일을 찾을 수 없음: {file_path}')
                continue
                
            with open(file_path, 'r') as f:
                content = f.read()
            
            # 마스킹 적용
            rule_id = finding.get('rule_id', '')
            resource = finding.get('resource', '')
            line_start = finding.get('line_start', 0)
            
            result, modified_content = apply_masking(content, rule_id, resource, line_start)
            
            if result:
                # 수정된 내용 저장
                with open(file_path, 'w') as f:
                    f.write(modified_content)
                masked_count += 1
                print(f'마스킹 적용됨: {file_path}, 리소스: {resource}, 규칙: {rule_id}')
        
        print(f'총 {masked_count}개의 취약점이 자동 마스킹되었습니다.')
        "
        
    - name: Commit changes if any
      if: steps.security_scan.outputs.has_critical == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A
        git diff --quiet && git diff --staged --quiet || (git commit -m "🛡️ 자동 보안 취약점 마스킹 적용" -m "보안 검사 도구가 발견한 취약점을 자동으로 수정했습니다." && git push)